/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  Delegation,
  DelegationInterface,
} from "../../../contracts/core/Delegation";

const _abi = [
  {
    inputs: [],
    name: "AlreadyExist",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyRemoved",
    type: "error",
  },
  {
    inputs: [],
    name: "DelegateAlreadyExist",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidHash",
    type: "error",
  },
  {
    inputs: [],
    name: "NikNeedRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEligible",
    type: "error",
  },
  {
    inputs: [],
    name: "ProviderNotEligible",
    type: "error",
  },
] as const;

export class Delegation__factory {
  static readonly abi = _abi;
  static createInterface(): DelegationInterface {
    return new Interface(_abi) as DelegationInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Delegation {
    return new Contract(address, _abi, runner) as unknown as Delegation;
  }
}
